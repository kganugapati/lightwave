/*
 * Copyright © 2012-2015 VMware, Inc.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the “License”); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an “AS IS” BASIS, without
 * warranties or conditions of any kind, EITHER EXPRESS OR IMPLIED.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */



/* name types */

typedef enum _VMKDC_NAME_TYPE {
    VMKDC_NT_UNKNOWN = 0,
    VMKDC_NT_PRINCIPAL = 1,
    VMKDC_NT_SRV_INST = 2,
    VMKDC_NT_SRV_HST = 3,
    VMKDC_NT_SRV_XHST = 4,
    VMKDC_NT_UID = 5,
    VMKDC_NT_X500_PRINCIPAL = 6,
    VMKDC_NT_SMTP_NAME = 7,
    VMKDC_NT_ENTERPRISE_PRINCIPAL = 10,
    VMKDC_NT_WELLKNOWN = 11,
    VMKDC_NT_MS_PRINCIPAL = -128,
    VMKDC_NT_MS_PRINCIPAL_AND_ID = -129,
    VMKDC_NT_ENT_PRINCIPAL_AND_ID = -130,
} VMKDC_NAME_TYPE;

/* message types */

typedef enum _VMKDC_MESSAGE_TYPE {
    VMKDC_MESSAGE_TYPE_KRB_AS_REQ = 10,
    VMKDC_MESSAGE_TYPE_KRB_AS_REP = 11,
    VMKDC_MESSAGE_TYPE_KRB_TGS_REQ = 12,
    VMKDC_MESSAGE_TYPE_KRB_TGS_REP = 13,
    VMKDC_MESSAGE_TYPE_KRB_AP_REQ = 14,
    VMKDC_MESSAGE_TYPE_KRB_AP_REP = 15,
    VMKDC_MESSAGE_TYPE_KRB_SAFE = 20,
    VMKDC_MESSAGE_TYPE_KRB_PRIV = 21,
    VMKDC_MESSAGE_TYPE_KRB_CRED = 22,
    VMKDC_MESSAGE_TYPE_KRB_ERROR = 30,
} VMKDC_MESSAGE_TYPE;

/* pa-data types */

typedef enum VMKDC_PADATA_TYPE {
    VMKDC_PADATA_NONE = 0,
    VMKDC_PADATA_TGS_REQ = 1,
    VMKDC_PADATA_AP_REQ = 1,
    VMKDC_PADATA_ENC_TIMESTAMP = 2,
    VMKDC_PADATA_PW_SALT = 3,
    VMKDC_PADATA_ENC_UNIX_TIME = 5,
    VMKDC_PADATA_SANDIA_SECUREID = 6,
    VMKDC_PADATA_SESAME = 7,
    VMKDC_PADATA_OSF_DCE = 8,
    VMKDC_PADATA_CYBERSAFE_SECUREID = 9,
    VMKDC_PADATA_AFS3_SALT = 10,
    VMKDC_PADATA_ETYPE_INFO = 11,
    VMKDC_PADATA_SAM_CHALLENGE = 12,
    VMKDC_PADATA_SAM_RESPONSE = 13,
    VMKDC_PADATA_PK_AS_REQ_19 = 14,
    VMKDC_PADATA_PK_AS_REP_19 = 15,
    VMKDC_PADATA_PK_AS_REQ_WIN = 15,
    VMKDC_PADATA_PK_AS_REQ = 16,
    VMKDC_PADATA_PK_AS_REP = 17,
    VMKDC_PADATA_PA_PK_OCSP_RESPONSE = 18,
    VMKDC_PADATA_ETYPE_INFO2 = 19,
    VMKDC_PADATA_USE_SPECIFIED_KVNO = 20,
    VMKDC_PADATA_SVR_REFERRAL_INFO = 20,
    VMKDC_PADATA_SAM_REDIRECT = 21,
    VMKDC_PADATA_GET_FROM_TYPED_DATA = 22,
    VMKDC_PADATA_SAM_ETYPE_INFO = 23,
    VMKDC_PADATA_SERVER_REFERRAL = 25,
    VMKDC_PADATA_ALT_PRINC = 24,
    VMKDC_PADATA_SAM_CHALLENGE2 = 30,
    VMKDC_PADATA_SAM_RESPONSE2 = 31,
    VMKDC_PADATA_EXTRA_TGT = 41,
    VMKDC_PADATA_TD_KRB_PRINCIPAL = 102,
    VMKDC_PADATA_PK_TD_TRUSTED_CERTIFIERS = 104,
    VMKDC_PADATA_PK_TD_CERTIFICATE_INDEX = 105,
    VMKDC_PADATA_TD_APP_DEFINED_ERROR = 106,
    VMKDC_PADATA_TD_REQ_NONCE = 107,
    VMKDC_PADATA_TD_REQ_SEQ = 108,
    VMKDC_PADATA_PA_PAC_REQUEST = 128,
    VMKDC_PADATA_FOR_USER = 129,
    VMKDC_PADATA_FOR_X509_USER = 130,
    VMKDC_PADATA_FOR_CHECK_DUPS = 131,
    VMKDC_PADATA_AS_CHECKSUM = 132,
    VMKDC_PADATA_PK_AS_09_BINDING = 132,
    VMKDC_PADATA_CLIENT_CANONICALIZED = 133,
    VMKDC_PADATA_FX_COOKIE = 133,
    VMKDC_PADATA_AUTHENTICATION_SET = 134,
    VMKDC_PADATA_AUTH_SET_SELECTED = 135,
    VMKDC_PADATA_FX_FAST = 136,
    VMKDC_PADATA_FX_ERROR = 137,
    VMKDC_PADATA_ENCRYPTED_CHALLENGE = 138,
    VMKDC_PADATA_OTP_CHALLENGE = 141,
    VMKDC_PADATA_OTP_REQUEST = 142,
    VMKDC_PADATA_OTP_CONFIRM = 143,
    VMKDC_PADATA_OTP_PIN_CHANGE = 144,
    VMKDC_PADATA_EPAK_AS_REQ = 145,
    VMKDC_PADATA_EPAK_AS_REP = 146,
    VMKDC_PADATA_PKINIT_KX = 147,
    VMKDC_PADATA_PKU2U_NAME = 148,
    VMKDC_PADATA_REQ_ENC_PA_REP = 149,
    VMKDC_PADATA_SUPPORTED_ETYPES = 165
} VMKDC_PADATA_TYPE;

/* authdata types */

/* checksum types */

typedef enum _VMKDC_CKSUMTYPE {
    VMKDC_CKSUMTYPE_NONE = 0,
    VMKDC_CKSUMTYPE_CRC32 = 1,
    VMKDC_CKSUMTYPE_RSA_MD4 = 2,
    VMKDC_CKSUMTYPE_RSA_MD4_DES = 3,
    VMKDC_CKSUMTYPE_DES_MAC = 4,
    VMKDC_CKSUMTYPE_DES_MAC_K = 5,
    VMKDC_CKSUMTYPE_RSA_MD4_DES_K = 6,
    VMKDC_CKSUMTYPE_RSA_MD5 = 7,
    VMKDC_CKSUMTYPE_RSA_MD5_DES = 8,
    VMKDC_CKSUMTYPE_RSA_MD5_DES3 = 9,
    VMKDC_CKSUMTYPE_SHA1_OTHER = 10,
    VMKDC_CKSUMTYPE_HMAC_SHA1_DES3 = 12,
    VMKDC_CKSUMTYPE_SHA1 = 14,
    VMKDC_CKSUMTYPE_HMAC_SHA1_96_AES_128 = 15,
    VMKDC_CKSUMTYPE_HMAC_SHA1_96_AES_256 = 16,
    VMKDC_CKSUMTYPE_GSSAPI = 32771,
    VMKDC_CKSUMTYPE_HMAC_MD5 = -138,
    VMKDC_CKSUMTYPE_HMAC_MD5_ENC = -1138
} VMKDC_CKSUMTYPE;

/* encryption types */

typedef enum _VMKDC_ENCTYPE {
    VMKDC_ENCTYPE_NULL = 0,
    VMKDC_ENCTYPE_DES_CBC_CRC = 1,
    VMKDC_ENCTYPE_DES_CBC_MD4 = 2,
    VMKDC_ENCTYPE_DES_CBC_MD5 = 3,
    VMKDC_ENCTYPE_DES3_CBC_MD5 = 5,
    VMKDC_ENCTYPE_OLD_DES3_CBC_SHA1 = 7,
    VMKDC_ENCTYPE_SIGN_DSA_GENERATE = 8,
    VMKDC_ENCTYPE_ENCRYPT_RSA_PRIV = 9,
    VMKDC_ENCTYPE_ENCRYPT_RSA_PUB = 10,
    VMKDC_ENCTYPE_DES3_CBC_SHA1 = 16,
    VMKDC_ENCTYPE_AES128_CTS_HMAC_SHA1_96 = 17,
    VMKDC_ENCTYPE_AES256_CTS_HMAC_SHA1_96 = 18,
    VMKDC_ENCTYPE_ARCFOUR_HMAC_MD5 = 23,
    VMKDC_ENCTYPE_ARCFOUR_HMAC_MD5_56 = 24,
    VMKDC_ENCTYPE_ENCTYPE_PK_CROSS = 48,
    VMKDC_ENCTYPE_ARCFOUR_MD4 = -128,
    VMKDC_ENCTYPE_ARCFOUR_HMAC_OLD = -133,
    VMKDC_ENCTYPE_ARCFOUR_HMAC_OLD_EXP = -135,
} VMKDC_ENCTYPE;

/* key types */

typedef enum _VMKDC_KEYTYPE {
    VMKDC_KEYTYPE_NULL = 0,
    VMKDC_KEYTYPE_DES_CBC_CRC = 1,
    VMKDC_KEYTYPE_DES_CBC_MD4 = 2,
    VMKDC_KEYTYPE_DES_CBC_MD5 = 3,
    VMKDC_KEYTYPE_DES3_CBC_MD5 = 5,
    VMKDC_KEYTYPE_OLD_DES3_CBC_SHA1 = 7,
    VMKDC_KEYTYPE_SIGN_DSA_GENERATE = 8,
    VMKDC_KEYTYPE_ENCRYPT_RSA_PRIV = 9,
    VMKDC_KEYTYPE_ENCRYPT_RSA_PUB = 10,
    VMKDC_KEYTYPE_DES3_CBC_SHA1 = 16,
    VMKDC_KEYTYPE_AES128_CTS_HMAC_SHA1_96 = 17,
    VMKDC_KEYTYPE_AES256_CTS_HMAC_SHA1_96 = 18,
    VMKDC_KEYTYPE_ARCFOUR_HMAC_MD5 = 23,
    VMKDC_KEYTYPE_ARCFOUR_HMAC_MD5_56 = 24,
    VMKDC_KEYTYPE_ENCTYPE_PK_CROSS = 48,
    VMKDC_KEYTYPE_ARCFOUR_MD4 = -128,
    VMKDC_KEYTYPE_ARCFOUR_HMAC_OLD = -133,
    VMKDC_KEYTYPE_ARCFOUR_HMAC_OLD_EXP = -135,
} VMKDC_KEYTYPE;

/* errors */

typedef enum _VMKDC_KRB_ERR {
    VMKDC_KDC_ERR_NONE = 0,
    VMKDC_KDC_ERR_NAME_EXP = 1,
    VMKDC_KDC_ERR_SERVICE_EXP = 2,
    VMKDC_KDC_ERR_BAD_PVNO = 3,
    VMKDC_KDC_ERR_C_OLD_MAST_KVNO = 4,
    VMKDC_KDC_ERR_S_OLD_MAST_KVNO = 5,
    VMKDC_KDC_ERR_C_PRINCIPAL_UNKNOWN = 6,
    VMKDC_KDC_ERR_S_PRINCIPAL_UNKNOWN = 7,
    VMKDC_KDC_ERR_PRINCIPAL_NOT_UNIQUE = 8,
    VMKDC_KDC_ERR_NULL_KEY = 9,
    VMKDC_KDC_ERR_CANNOT_POSTDATE = 10,
    VMKDC_KDC_ERR_NEVER_VALID = 11,
    VMKDC_KDC_ERR_POLICY = 12,
    VMKDC_KDC_ERR_BADOPTION = 13,
    VMKDC_KDC_ERR_ETYPE_NOSUPP = 14,
    VMKDC_KDC_ERR_SUMTYPE_NOSUPP = 15,
    VMKDC_KDC_ERR_PADATA_TYPE_NOSUPP = 16,
    VMKDC_KDC_ERR_TRTYPE_NOSUPP = 17,
    VMKDC_KDC_ERR_CLIENT_REVOKED = 18,
    VMKDC_KDC_ERR_SERVICE_REVOKED = 19,
    VMKDC_KDC_ERR_TGT_REVOKED = 20,
    VMKDC_KDC_ERR_CLIENT_NOTYET = 21,
    VMKDC_KDC_ERR_SERVICE_NOTYET = 22,
    VMKDC_KDC_ERR_KEY_EXPIRED = 23,
    VMKDC_KDC_ERR_PREAUTH_FAILED = 24,
    VMKDC_KDC_ERR_PREAUTH_REQUIRED = 25,
    VMKDC_KDC_ERR_SERVER_NOMATCH = 26,
    VMKDC_KDC_ERR_MUST_USE_USER2USER = 27,
    VMKDC_KDC_ERR_PATH_NOT_ACCPETED = 28,
    VMKDC_KDC_ERR_SVC_UNAVAILABLE = 29,
    VMKDC_KRB_AP_ERR_BAD_INTEGRITY = 31,
    VMKDC_KRB_AP_ERR_TKT_EXPIRED = 32,
    VMKDC_KRB_AP_ERR_TKT_NYV = 33,
    VMKDC_KRB_AP_ERR_REPEAT = 34,
    VMKDC_KRB_AP_ERR_NOT_US = 35,
    VMKDC_KRB_AP_ERR_BADMATCH = 36,
    VMKDC_KRB_AP_ERR_SKEW = 37,
    VMKDC_KRB_AP_ERR_BADADDR = 38,
    VMKDC_KRB_AP_ERR_BADVERSION = 39,
    VMKDC_KRB_AP_ERR_MSG_TYPE = 40,
    VMKDC_KRB_AP_ERR_MODIFIED = 41,
    VMKDC_KRB_AP_ERR_BADORDER = 42,
    VMKDC_KRB_AP_ERR_BADKEYVER = 44,
    VMKDC_KRB_AP_ERR_NOKEY = 45,
    VMKDC_KRB_AP_ERR_MUT_FAIL = 46,
    VMKDC_KRB_AP_ERR_BADDIRECTION = 47,
    VMKDC_KRB_AP_ERR_METHOD = 48,
    VMKDC_KRB_AP_ERR_BADSEQ = 49,
    VMKDC_KRB_AP_ERR_INAPP_CKSUM = 50,
    VMKDC_KRB_AP_PATH_NOT_ACCEPTED = 51,
    VMKDC_KRB_ERR_RESPONSE_TOO_BIG = 52,
    VMKDC_KRB_ERR_GENERIC = 60,
    VMKDC_KRB_ERR_FIELD_TOOLONG = 61,
    VMKDC_KDC_ERROR_CLIENT_NOT_TRUSTED = 62,
    VMKDC_KDC_ERROR_KDC_NOT_TRUSTED = 63,
    VMKDC_KDC_ERROR_INVALID_SIG = 64,
    VMKDC_KDC_ERR_KEY_TOO_WEAK = 65,
    VMKDC_KDC_ERR_CERTIFICATE_MISMATCH = 66,
    VMKDC_KRB_AP_ERR_NO_TGT = 67,
    VMKDC_KDC_ERR_WRONG_REALM = 68,
    VMKDC_KRB_AP_ERR_USER_TO_USER_REQUIRED = 69,
    VMKDC_KDC_ERR_CANT_VERIFY_CERTIFICATE = 70,
    VMKDC_KDC_ERR_INVALID_CERTIFICATE = 71,
    VMKDC_KDC_ERR_REVOKED_CERTIFICATE = 72,
    VMKDC_KDC_ERR_REVOCATION_STATUS_UNKNOWN = 73,
    VMKDC_KDC_ERR_REVOCATION_STATUS_UNAVAILABLE = 74,
    VMKDC_KDC_ERR_CLIENT_NAME_MISMATCH = 75,
    VMKDC_KDC_ERR_KDC_NAME_MISMATCH = 76,
} VMKDC_KRB_ERR;

/* message tags */

typedef enum _VMKDC_MESSAGE_TAG
{
    VMKDC_MSG_TAG_AS_REQ = 0x6A,
    VMKDC_MSG_TAG_AS_REP = 0x6B,
    VMKDC_MSG_TAG_TGS_REQ = 0x6C,
    VMKDC_MSG_TAG_TGS_REP = 0x6D,
    VMKDC_MSG_TAG_AP_REQ = 0x6E,
    VMKDC_MSG_TAG_AP_REP = 0x6F,
    VMKDC_MSG_TAG_KRB_SAFE = 0x74,
    VMKDC_MSG_TAG_KRB_PRIV = 0x75,
    VMKDC_MSG_TAG_KRB_CRED = 0x76,
    VMKDC_MSG_TAG_KRB_ERROR = 0x7E,
} VMKDC_MESSAGE_TAG;

/* key-usage types */

typedef enum _VMKDC_KEY_USAGE
{
    VMKDC_KU_PA_ENC_TIMESTAMP = 1,
    VMKDC_KU_TICKET = 2,
    VMKDC_KU_AS_REP_ENC_PART = 3,
    VMKDC_KU_TGS_REQ_AUTH_DAT_SESSION = 4,
    VMKDC_KU_TGS_REQ_AUTH_DAT_SUBKEY = 5,
    VMKDC_KU_TGS_REQ_AUTH_CKSUM = 6,
    VMKDC_KU_TGS_REQ_AUTH = 7,
    VMKDC_KU_TGS_REP_ENC_PART_SESSION = 8,
    VMKDC_KU_TGS_REP_ENC_PART_SUB_KEY = 9,
    VMKDC_KU_AP_REQ_AUTH_CKSUM = 10,
    VMKDC_KU_AP_REQ_AUTH = 11,
    VMKDC_KU_AP_REQ_ENC_PART = 12,
    VMKDC_KU_KRB_PRIV = 13,
    VMKDC_KU_KRB_CRED = 14,
    VMKDC_KU_KRB_SAFE_CKSUM = 15,
    VMKDC_KU_OTHER_ENCRYPTED = 16,
    VMKDC_KU_OTHER_CKSUM = 17,
    VMKDC_KU_KRB_ERROR = 18,
    VMKDC_KU_AD_KDC_ISSUED = 19,
    VMKDC_KU_MANDATORY_TICKET_EXTENSION = 20,
    VMKDC_KU_AUTH_DATA_TICKET_EXTENSION = 21,
    VMKDC_KU_USAGE_SEAL = 22,
    VMKDC_KU_USAGE_SIGN = 23,
    VMKDC_KU_USAGE_SEQ = 24,
    VMKDC_KU_USAGE_ACCEPTOR_SEAL = 22,
    VMKDC_KU_USAGE_ACCEPTOR_SIGN = 23,
    VMKDC_KU_USAGE_INITIATOR_SEAL = 24,
    VMKDC_KU_USAGE_INITIATOR_SIGN = 25,
    VMKDC_KU_PA_SERVER_REFERRAL_DATA = 22,
    VMKDC_KU_SAM_CHECKSUM = 25,
    VMKDC_KU_SAM_ENC_TRACK_ID = 26,
    VMKDC_KU_PA_SERVER_REFERRAL = 26,
    VMKDC_KU_SAM_ENC_NONCE_SAD = 27,
    VMKDC_KU_PA_PKINIT_KX = 44,
    VMKDC_KU_AS_REQ = 56,
    VMKDC_KU_DIGEST_ENCRYPT = -18,
    VMKDC_KU_DIGEST_OPAQUE = -19,
    VMKDC_KU_KRB5SIGNEDPATH = -21,
    VMKDC_KU_CANONICALIZED_NAMES = -23
} VMKDC_KEY_USAGE;

/* Salt types */

typedef enum _VMKDC_SALTTYPE {
    VMKDC_SALTTYPE_NORMAL = 0,
    VMKDC_SALTTYPE_V4 = 1,
    VMKDC_SALTTYPE_NOREALM = 2,
    VMKDC_SALTTYPE_ONLYREALM = 3,
    VMKDC_SALTTYPE_SPECIAL = 4,
    VMKDC_SALTTYPE_AFS3 = 5,
    VMKDC_SALTTYPE_CERTHASH = 6
} VMKDC_SALTTYPE;

/* Ticket Flags */

typedef enum _VMKDC_TICKETFLAG_TYPE {
    VMKDC_TF_FORWARDABLE = 1,
    VMKDC_TF_FORWARDED = 2,
    VMKDC_TF_PROXIABLE = 3,
    VMKDC_TF_PROXY = 4,
    VMKDC_TF_MAY_POSTDATE = 5,
    VMKDC_TF_POSTDATED = 6,
    VMKDC_TF_INVALID = 7,
    VMKDC_TF_RENEWABLE = 8,
    VMKDC_TF_INITIAL = 9,
    VMKDC_TF_PRE_AUTHENT = 10,
    VMKDC_TF_HW_AUTHENT = 11,
    VMKDC_TF_TRANSITED_POLICY_CHECKED = 12,
    VMKDC_TF_OK_AS_DELEGATE = 13,
} VMKDC_TICKETFLAG_TYPE;

/* KDC Options */

typedef enum _VMKDC_KDC_OPTIONS_TYPE {
    VMKDC_KO_FORWARDABLE = 1,
    VMKDC_KO_FORWARDED = 2,
    VMKDC_KO_PROXIABLE = 3,
    VMKDC_KO_PROXY = 4,
    VMKDC_KO_ALLOW_POSTDATE = 5,
    VMKDC_KO_POSTDATED = 6,
    VMKDC_KO_RENEWABLE = 8,
    VMKDC_KO_OPT_HARDWARE_AUTH = 11,
    VMKDC_KO_DISABLE_TRANSITED_CHECK = 26,
    VMKDC_KO_RENEWABLE_OK = 27,
    VMKDC_KO_ENC_TKT_IN_SKEY = 28,
    VMKDC_KO_RENEW = 30,
    VMKDC_KO_VALIDATE = 31,
} VMKDC_KDC_OPTIONS_TYPE;

/* Authz Data */

typedef enum _VMKDC_AUTHZDATA_TYPE {
    VMKDC_AUTHZDATA_AD_IF_RELEVANT = 1,
    VMKDC_AUTHZDATA_KDC_ISSUED = 4,
    VMKDC_AUTHZDATA_AND_OR = 5,
    VMKDC_AUTHZDATA_MANDATORY_FOR_KDC = 8,
    VMKDC_AUTHZDATA_INITIAL_VERIFIED_CAS = 9,
    VMKDC_AUTHZDATA_OSF_DCE = 64,
    VMKDC_AUTHZDATA_SESAME = 65,
    VMKDC_AUTHZDATA_CAMMAC = 96,
    VMKDC_AUTHZDATA_WIN2K_PAC = 128,
    VMKDC_AUTHZDATA_ETYPE_NEGOTIATION = 129,
    VMKDC_AUTHZDATA_VMDIR_PAC = -121, /* TBD - use a private value for now */
} VMKDC_AUTHZDATA_TYPE;

typedef enum _VMKDC_PAC_INFO_BUFFER_TYPE {
    VMKDC_PAC_ACCESS_INFO = 1,
} VMKDC_PAC_INFO_BUFFER_TYPE;
